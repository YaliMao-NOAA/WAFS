#!/bin/bash

########################################################
# WAFS Verification package
# a sequential job
# Suggestion: allow 3 hours for each run to complete
#
########################################################

#1 run_JVERF_GRID2GRID_WAFS.cron (it can be run independently, or from run_JVERF_GRID2GRID_WAFS.loop)
#2 run_JVERF_GRID2GRID_WAFS.htar
#3 run_JVERF_GRID2GRID_WAFS.sh

# 1.0) (On WCOSS2) $HOMEsave/wafs_run/run_JVERF_GRID2GRID_WAFS.htar to archive GFIP
# 1.1) (On Hera) $HOMEsave/wafs_run/run_JVERF_GRID2GRID_WAFS.htar to extract all data
#      (On WCOSS2) $HOMEsave/wafs_run/run_JVERF_GRID2GRID_WAFS.htar to prepare(extract or copy) all data
# 2) $HOMEsave/wafs_run/run_JVERF_GRID2GRID_WAFS.sh
# 3) HOMEverf_g2g=$HOMEgit/verf_g2g.v3.0.12
#      jobs/JVERF_GRID2GRID_WAFS
#      scripts/exverf_g2g_wafs.sh.ecf
#      / ush/verf_g2g_get_wafs2.sh
#      | ush/verf_g2g_get_wafs.sh
#      \ ush/verf_g2g_wafs.sh
#        / verf_g2g_prepg2g_grib2.sh
#        \ verf_g2g_fitsg2g_grib2.sh
#      !!! needs compiling !!! $HOMEverf_g2g/exec/verf_g2g_icing_convert.$MACHINE
#      !!! needs compiling !!! $HOMEverf_g2g/exec/verf_g2g_grid2grid_grib2.$MACHINE

#*******************************************************
set -x

if [ -z $MACHINE ] ; then
    . ~/envir_setting.sh
fi
# If run on WCOSS2, only run on dev machine.
if [ $MACHINE_DEV = 'no' ] ; then
    echo "This is not a dev $MACHINE machine, quit job"
    exit 1
fi

date

########################################################
#### arguments, (export)vday                        ####
########################################################

export envirp=$1   # prod or para, forecast product
export envirv=$2   # prod or para, valication data
windonly=$3
if [[ $windonly = "wind" ]] ; then
    export VMODELS="|gfs|"
fi

export DATA=$TMP/wafs.vrfy.${envirp}_${envirv}.working
mkdir -p $DATA

export COMIN=$TMP/wafs.vrfy.com
mkdir -p $COMIN # For extracting data from HPSS

########################################################
#### 1. Prepare observation and forecast data       ####
#### 2. Verification of U/V/T forecast and ICIP     #### 
########################################################

htarscript=$HOMEsave/wafs_run/run_JVERF_GRID2GRID_WAFS.htar
script=$HOMEsave/wafs_run/run_JVERF_GRID2GRID_WAFS.sh

logfile=$DATA/wafs_verif.grid2grid.vsdb.log
rm $logfile
jobname=wafs_verif

if [[ $MACHINE = "hera" ]] ; then

  # verfication is 2 days ago unless it's predefined.
  # On Hera, data are from HPSS and available 2 days after
  export vday=${vday:-`$NDATE -48 | cut -c1-8`}

  ACCOUNT=ovp

  # Prepare (extract) data from HPSS
  echo 0 $htarscript $vday $COMIN > $TMP/wafs.vrfy.${envirp}_${envirv}.working/htar.cmdfile
  srun -l --multi-prog -A ${ACCOUNT} --ntasks=1 -p service -t 01:00:00 $TMP/wafs.vrfy.${envirp}_${envirv}.working/htar.cmdfile

  # Run verficiation
  SUB=sbatch
  ${SUB} -A ${ACCOUNT} -t 04:30:00 -N 1 -q batch -J ${jobname} -o ${logfile} ${script}

elif [[ $MACHINE = "wcoss2" ]] ; then

  # verfication is 1 day before today unless it's predefined.
  export vday=${vday:-`$NDATE -24 | cut -c1-8`}

  # Prepare data (copy from COM or extract from HPSS)
  sh $htarscript $vday $COMIN

  # Run verficiation
  SUB=qsub
#  $SUB -q debug -P GFS-DEV -o $logfile -e $logfile -n 1 -cwd $TMP -W 4:30  -J $jobname -R span[ptile=1] -R affinity[core] < $script
  sh $script

elif [[ $MACHINE = "dell" ]] ; then

  # verfication is 1 day before today unless it's predefined.
  export vday=${vday:-`$NDATE -24 | cut -c1-8`}

  # Prepare data (copy from COM or extract from HPSS)
  sh $htarscript $vday $COMIN

  # Run verficiation
  SUB=bsub
#  $SUB -q debug -P GFS-DEV -o $logfile -e $logfile -n 1 -cwd $TMP -W 4:30  -J $jobname -R span[ptile=1] -R affinity[core] < $script
  sh $script
  
fi


########################################################
### Archive vsdb results to HPSS                    ####
########################################################

if [ $MACHINE = "hera" ] ; then # On Hera, verification is done by submitting a job, so needs to wait
    if [[ $windonly = "wind" ]] ; then
	sleep 720
	sleepmax=1800
	sleepint=60
    else
	# WAFS verification takes at least 1 hour
	sleep 3600
	sleepmax=16200 # wait at most 4.5 hours
	sleepint=180   # check every 3 minutes
    fi
    sleeptime=0
    while [ $sleeptime -le $sleepmax ] ; do
	if test -f $DATA/$vday/$vday ; then
	    break
	else
	    sleeptime=`expr $sleeptime + $sleepint`
	    sleep $sleepint
	fi
	if [ $sleeptime -eq $sleepmax ] ; then
	    echo " *** FATA ERROR: No verification data is generated for $vday"
	    exit
	fi
    done
fi

cd $TMP
day=`echo $vday | cut -c1-6`
htar -Pcvf /NCEPDEV/emc-global/5year/Yali.Mao/wafs_vsdb/${envirp}.${envirv}/$day/$vday.vsdb.tar `find wafs.vrfy.${envirp}_${envirv}.vsdb/wafs -name "*$vday*" -size +1c -type f`

########################################################
### transfer vsdb to RZDM and save to               ####
### /gpfs/dell2/emc/modeling/noscrub/Yali.Mao/vsdb  #### 
########################################################
dataDir=wafs.vrfy.${envirp}_${envirv}.vsdb/wafs

cd $TMP
allfilesize=`du -c $dataDir/*$vday* | tail -1| cut -f 1`

if [[ $allfilesize  -eq 0 ]] ; then
  echo "No ${envirp}.${envirv} vsdb result is generated. Please check."
  echo "No ${envirp}.${envirv} vsdb result is generated on $vday." | mailx -s "VSDB verification is not generated." yali.mao@noaa.gov
  date
  exit 1
else
  # to rzdm server (linux computer will download data from rzdm server then delete 
  if [[ ! `hostname` =~ ^h ]] ; then
    remote=/home/people/emc/ymao/wafs.vrfy/vsdb
    remoteServer=ymao@emcrzdm.ncep.noaa.gov
    rsync -ravP --min-size=1 $TMP/$dataDir/*${vday}* ${remoteServer}:${remote}/.
  fi

  # to wcoss/save folder
  mkdir -p $VSDBsave/wafs/${envirp}.${envirv}
  rsync -avP --min-size=1 $TMP/$dataDir/*${vday}* $VSDBsave/wafs/${envirp}.${envirv}/.
fi

date
exit 0
