#!/bin/sh

########################################################
# 1) Upload icing and turbulence grib2 data to rzdm ftp server
# 2) Making plots and upload to rzdm www website
#
########################################################
# 1) $HOMEsave/scripts/GCIP_GFIP_GTG_2_rzdm.cron
# 2) $HOMEsave/scripts/GCIP_GFIP_GTG_2_rzdm.job
#    On WCOSS2 (initialization, data preparation, data transfer to RZDM)
# 3) $HOMEsave/scripts/GCIP_GFIP_GTG_2_rzdm.data.sh
#    On HERA (data download from RZDM, plotting, plotting transfer to RZDM)
# 4) $HOMEsave/scripts/GCIP_GFIP_GTG_2_rzdm.plot.sh
# ---bsub if $prod = test
#    !!! may need compiling!!!
# ---$HOMEsave/grads/plotWafs.sh
#    !!! fore 234 icsev needs compiling!!! ICSEVconvert=$HOMEgit/verf_g2g.v3.0.12/exec/verf_g2g_icing_convert.$MACHINE
#
#*******************************************************


source ~/.bashrc

set -xa

date

export prod=${prod:-prod}
export cyc=${cyc:-00}
export PDY=${PDY:-`$NDATE | cut -c1-8`}

mkdir -p $TMP/GCIP_GFIP_GTG_2_rzdm.working

# Keep DATAgrib2 for verification, remove DATAROOTplot
export DATAgrib2=$TMP/gfs_${prod}_rzdm_prod/gfs.$PDY/$cyc
export DATAROOTplot=$TMP/gfs_${prod}_rzdm_plotting_$cyc

remoteServer=ymao@emcrzdm.ncep.noaa.gov
export remoteData=/home/ftp/emc/unaff/ymao/wafs.$prod/gfs.$PDY
export remotePlot=/home/www/emc/htdocs/gmb/icao/${prod}_plot

############################
# Create and transfer data
############################

jobname=wafs2rzdm
logfile=$TMP/GCIP_GFIP_GTG_2_rzdm.working/gfipgcipgtg2rzdm.$cyc
rm $logfile

export fhours="003 006 009 012 015 018 021 024 027 030 033 036 000"
# 000 and 003 needs more time than others because of GCIP.
# Put 000 at the last of the list to be 'waited'
nfhours=`echo $fhours | wc -w`

script=$HOMEsave/scripts/GCIP_GFIP_GTG_2_rzdm.job

if [ $MACHINE = "wcoss2" ] ; then

    # Each job (grib2 data and plotting) will generate the list, clean it first.
    rm $TMP/GCIP_GFIP_GTG_2_rzdm.working/GCIP_GFIP_GTG_2_rzdm.list

    # Step 1: Generate grib2 data
    module load envvar/1.0
    module load intel/19.1.3.304 PrgEnv-intel/8.1.0 craype/2.7.10
    module load cray-pals/1.0.12
    module load cfp/2.0.4
    export MPIRUN="mpiexec -np $nfhours -cpu-bind verbose,core cfp"
    SUB=qsub
    $SUB -V -q debug -A GFS-DEV -j oe -o $logfile -l walltime=00:15:00 -l select=1:ncpus=$nfhours:mem=80GB -N $jobname $script

    # Step 2: Define grib2 data to be transferred to RZDM
    whichRemoteDir=$remoteData
    whichRemoteData=$DATAgrib2/*

elif [ $MACHINE = "hera" ] ; then

    # Each job (grib2 data and plotting) will generate the list, clean it first.
    rm $TMP/GCIP_GFIP_GTG_2_rzdm.working/GCIP_GFIP_GTG_2_rzdm.list

    # Step 3: Download data from RZDM
    mkdir -p $DATAgrib2
    rsync -avP ${remoteServer}:${remoteData}/* $DATAgrib2/.
    err=$?
    if [ ! $err -eq 0 ] ; then
	echo "Error when downloading grib2 data from RZDM"
	exit
    fi
    
    # Step 4: Generate plottings
    export MPIRUN="srun"
    SUB=sbatch
    ACCOUNT=ovp
    ${SUB} -A ${ACCOUNT} -t 00:15:00 -N $nfhours -q batch -J ${jobname} -o ${logfile} ${script}

    # Step 5: Define plottings to be transferred to RZDM
    whichRemoteDir=$remotePlot
    whichRemoteData=$DATAROOTplot/*/*png
fi

############################
# Transfer data to RZDM
############################
ic=1
while [ $ic -le 180 ] ; do
    lines=`cat $TMP/GCIP_GFIP_GTG_2_rzdm.working/GCIP_GFIP_GTG_2_rzdm.list | wc -l`

    if [ $lines -eq $nfhours ] ; then
	ssh $remoteServer "mkdir -p $whichRemoteDir"
	rsync -avP $whichRemoteData ${remoteServer}:${whichRemoteDir}/.
        break
    else
        ic=`expr $ic + 1`
        sleep 60
    fi

    if [ $ic -eq  180 ] ; then
        echo " Time out: No data transferred to RZDM after 3-hour waiting"
	exit
    fi
done

########################################################
####        cleanup grib data and plottings if      ####
####        older than 'endDate', keep up to 3 days ####
########################################################
if [ $MACHINE = "hera" ] ; then
    dates=$PDY
    dates="$dates `$NDATE -1 ${PDY}00 | cut -c1-8`"
    echo "cyc=$cyc"
    if [[ $cyc <  18 ]] ; then
	dates="$dates `$NDATE -25 ${PDY}00 | cut -c1-8`"
    fi
    ssh $remoteServer "ksh ~/scripts/wafs_web.ftp_maintenance.sh $prod $cyc $dates"
fi
date
